In file included from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/targets.hpp:5:0[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend/include/aslam/GridCalibrationTargetDesignVariableContainer.hpp:5[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/GridCalibration.cpp:5[m[K:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/GridCalibrationTargetCheckerboard.hpp:[m[K In constructor â€˜[01m[Kaslam::cameras::GridCalibrationTargetCheckerboard::CheckerboardOptions::CheckerboardOptions()[m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/GridCalibrationTargetCheckerboard.hpp:43:10:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kaslam::cameras::GridCalibrationTargetCheckerboard::CheckerboardOptions::showExtractionVideo[m[Kâ€™ will be initialized after [[01;35m[K-Wreorder[m[K]
     bool [01;35m[KshowExtractionVideo[m[K;
          [01;35m[K^~~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/GridCalibrationTargetCheckerboard.hpp:40:18:[m[K [01;35m[Kwarning: [m[K  â€˜[01m[Kunsigned int aslam::cameras::GridCalibrationTargetCheckerboard::CheckerboardOptions::windowWidth[m[Kâ€™ [[01;35m[K-Wreorder[m[K]
     unsigned int [01;35m[KwindowWidth[m[K;
                  [01;35m[K^~~~~~~~~~~[m[K
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/GridCalibrationTargetCheckerboard.hpp:25:5:[m[K [01;35m[Kwarning: [m[K  when initialized here [[01;35m[K-Wreorder[m[K]
     [01;35m[KCheckerboardOptions[m[K() :
     [01;35m[K^~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:4:0[m[K:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:[m[K In function â€˜[01m[Kvoid aslam::python::exportReprojectionError(const string&)[m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:24:26:[m[K [01;35m[Kwarning: [m[Ktypedef â€˜[01m[Kdescriptor_t[m[Kâ€™ locally defined but not used [[01;35m[K-Wunused-local-typedefs[m[K]
   typedef DescriptorBase [01;35m[Kdescriptor_t[m[K;
                          [01;35m[K^~~~~~~~~~~~[m[K
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:27:40:[m[K [01;35m[Kwarning: [m[Ktypedef â€˜[01m[Kkeypoint_t[m[Kâ€™ locally defined but not used [[01;35m[K-Wunused-local-typedefs[m[K]
   typedef typename frame_t::keypoint_t [01;35m[Kkeypoint_t[m[K;
                                        [01;35m[K^~~~~~~~~~[m[K
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:[m[K In function â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&)[m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:71:26:[m[K [01;35m[Kwarning: [m[Ktypedef â€˜[01m[Kdescriptor_t[m[Kâ€™ locally defined but not used [[01;35m[K-Wunused-local-typedefs[m[K]
   typedef DescriptorBase [01;35m[Kdescriptor_t[m[K;
                          [01;35m[K^~~~~~~~~~~~[m[K
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:73:40:[m[K [01;35m[Kwarning: [m[Ktypedef â€˜[01m[Kkeypoint_t[m[Kâ€™ locally defined but not used [[01;35m[K-Wunused-local-typedefs[m[K]
   typedef typename frame_t::keypoint_t [01;35m[Kkeypoint_t[m[K;
                                        [01;35m[K^~~~~~~~~~[m[K
In file included from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/CovarianceReprojectionError.hpp:74:0[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:6[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:4[m[K:
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:28:88:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
      const keypoint_t & [01;35m[Kk[m[K = _frame->keypoint(_keypointIndex);
                         [01;35m[K^[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:32:106:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:36:128:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:40:112:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:47:82:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:51:100:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:55:122:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[KEigen::MatrixXd aslam::backend::CovarianceReprojectionError<FRAME_T>::covarianceMap() [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:92:26:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:59:106:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:49:25:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kk[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
In file included from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_boost/include/sm/boost/serialization.hpp:10:0[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/Keypoint.hpp:18[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/Frame.hpp:15[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:4[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:4[m[K:
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:28:88:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:32:106:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:36:128:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::PinholeProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:40:112:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::NoDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:47:82:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::RadialTangentialDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:51:100:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::EquidistantDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:55:122:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp: In instantiation of â€˜[01m[Kaslam::backend::CovarianceReprojectionError<FRAME_T>::CovarianceReprojectionError(const frame_t*, int, const aslam::backend::HomogeneousExpression&, aslam::backend::CameraDesignVariable<typename FRAME_T::camera_geometry_t>, aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t*) [with FRAME_T = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; aslam::backend::CovarianceReprojectionError<FRAME_T>::frame_t = aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; typename FRAME_T::camera_geometry_t = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; aslam::backend::CovarianceReprojectionError<FRAME_T>::spline_t = aslam::splines::BSplinePoseDesignVariable][m[Kâ€™:
[01m[K/usr/include/boost/python/object/pointer_holder.hpp:195:15:[m[K   required from â€˜[01m[Kboost::python::objects::pointer_holder<Pointer, Value>::pointer_holder(PyObject*, A0, A1, A2, A3, A4) [with A0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; A1 = int; A2 = boost::python::objects::reference_to_value<aslam::backend::HomogeneousExpression>; A3 = boost::python::objects::reference_to_value<aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; A4 = aslam::splines::BSplinePoseDesignVariable*; Pointer = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; Value = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; PyObject = _object][m[Kâ€™
[01m[K/usr/include/boost/python/object/make_holder.hpp:94:18:[m[K   required from â€˜[01m[Kstatic void boost::python::objects::make_holder<5>::apply<Holder, ArgList>::execute(PyObject*, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3, boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4) [with Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; PyObject = _object; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t0 = const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t1 = int; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t2 = aslam::backend::HomogeneousExpression; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t3 = aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >; boost::python::objects::make_holder<5>::apply<Holder, ArgList>::t4 = aslam::splines::BSplinePoseDesignVariable*][m[Kâ€™
[01m[K/usr/include/boost/python/detail/make_keyword_range_fn.hpp:63:47:[m[K   required from â€˜[01m[Kboost::python::api::object boost::python::detail::make_keyword_range_constructor(const CallPolicies&, const keyword_range&, Holder*, ArgList*, Arity*) [with ArgList = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; Arity = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; Holder = boost::python::objects::pointer_holder<boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; CallPolicies = boost::python::default_call_policies; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:310:66:[m[K   required from â€˜[01m[Kvoid boost::python::detail::def_init_aux(ClassT&, const Signature&, NArgs, const CallPoliciesT&, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:377:31:[m[K   required from â€˜[01m[Kstatic void boost::python::detail::define_class_init_helper<0>::apply(ClassT&, const CallPoliciesT&, const Signature&, NArgs, const char*, const keyword_range&) [with ClassT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; CallPoliciesT = boost::python::default_call_policies; Signature = boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*>; NArgs = boost::mpl::size<boost::mpl::vector5<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*> >; boost::python::detail::keyword_range = std::pair<const boost::python::detail::keyword*, const boost::python::detail::keyword*>][m[Kâ€™
[01m[K/usr/include/boost/python/init.hpp:149:67:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/include/boost/python/def_visitor.hpp:67:34:[m[K   required from â€˜[01m[Kvoid boost::python::def_visitor<DerivedVisitor>::visit(classT&) const [with classT = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>; DerivedVisitor = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:221:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::self& boost::python::class_<T, X1, X2, X3>::def(const boost::python::def_visitor<Derived>&) [with Derived = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified; boost::python::class_<T, X1, X2, X3>::self = boost::python::class_<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >, boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >, boost::python::bases<aslam::backend::ErrorTerm>, boost::python::detail::not_specified>][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:455:9:[m[K   required from â€˜[01m[Kvoid boost::python::class_<T, X1, X2, X3>::initialize(const DefVisitor&) [with DefVisitor = boost::python::init_base<boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_> >; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/usr/include/boost/python/class.hpp:204:9:[m[K   required from â€˜[01m[Kboost::python::class_<T, X1, X2, X3>::class_(const char*, const boost::python::init_base<DerivedT>&) [with DerivedT = boost::python::init<const aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >*, int, aslam::backend::HomogeneousExpression, aslam::backend::CameraDesignVariable<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> >, aslam::splines::BSplinePoseDesignVariable*, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_, mpl_::void_>; W = aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > >; X1 = boost::shared_ptr<aslam::backend::CovarianceReprojectionError<aslam::Frame<aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask> > > >; X2 = boost::python::bases<aslam::backend::ErrorTerm>; X3 = boost::python::detail::not_specified][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/include/aslam/ExportReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::python::exportCovarianceReprojectionError(const string&) [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::OmniProjection<aslam::cameras::FovDistortion>, aslam::cameras::RollingShutter, aslam::cameras::NoMask>; std::__cxx11::string = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:59:106:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/CovarianceReprojectionError.hpp:27:56:[m[K [01;35m[Kwarning: [m[Kcomparison between signed and unsigned integer expressions [[01;35m[K-Wsign-compare[m[K]
       SM_ASSERT_TRUE(Exception, _frame->numKeypoints() > _keypointIndex, "Keypoint index must be in bounds of frame.");
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/Schweizer-Messer/sm_common/include/sm/assert_macros.hpp:85:8:[m[K [01;36m[Knote: [m[Kin definition of macro â€˜[01m[KSM_ASSERT_TRUE[m[Kâ€™
   if(!([01;36m[Kcondition[m[K))              \
        [01;36m[K^~~~~~~~~[m[K
In file included from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/DoubleSphereProjection.hpp:289:0[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras.hpp:11[m[K,
                 from [01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:11[m[K:
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp: In instantiation of â€˜[01m[Kvoid aslam::cameras::DoubleSphereProjection<DISTORTION_T>::euclideanToKeypointDistortionJacobian(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) const [with DERIVED_P = Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Block<const Eigen::Matrix<double, 4, 1>, 3, 1, false> >; DERIVED_JD = Eigen::Matrix<double, -1, -1>; DISTORTION_T = aslam::cameras::NoDistortion][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp:550:42:[m[K   required from â€˜[01m[Kvoid aslam::cameras::DoubleSphereProjection<DISTORTION_T>::homogeneousToKeypointDistortionJacobian(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) const [with DERIVED_P = Eigen::Matrix<double, 4, 1>; DERIVED_JD = Eigen::Matrix<double, -1, -1>; DISTORTION_T = aslam::cameras::NoDistortion][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/CameraGeometry.hpp:363:74:[m[K   required from â€˜[01m[Kvoid aslam::cameras::CameraGeometry<PROJECTION_T, SHUTTER_T, MASK_T>::homogeneousToKeypointDistortionJacobian(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) const [with DERIVED_P = Eigen::Matrix<double, 4, 1>; DERIVED_JS = Eigen::Matrix<double, -1, -1>; PROJECTION_T = aslam::cameras::DoubleSphereProjection<aslam::cameras::NoDistortion>; SHUTTER_T = aslam::cameras::GlobalShutter; MASK_T = aslam::cameras::NoMask][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend/include/aslam/backend/implementation/CameraDesignVariable.hpp:50:4:[m[K   required from â€˜[01m[Kvoid aslam::backend::CameraDesignVariable<CAMERA_T>::evaluateJacobians(aslam::backend::JacobianContainer&, Eigen::Vector4d) const [with CAMERA_T = aslam::cameras::CameraGeometry<aslam::cameras::DoubleSphereProjection<aslam::cameras::NoDistortion>, aslam::cameras::GlobalShutter, aslam::cameras::NoMask>; Eigen::Vector4d = Eigen::Matrix<double, 4, 1>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/ReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::backend::ReprojectionError<CAMERA_GEOMETRY_T>::evaluateJacobiansImplementation(aslam::backend::JacobianContainer&) const [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::DoubleSphereProjection<aslam::cameras::NoDistortion>, aslam::cameras::GlobalShutter, aslam::cameras::NoMask>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:136:1:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp:508:42:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kp[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
     const Eigen::MatrixBase<DERIVED_P> & [01;35m[Kp[m[K,
                                          [01;35m[K^[m[K
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp: In instantiation of â€˜[01m[Kvoid aslam::cameras::DoubleSphereProjection<DISTORTION_T>::euclideanToKeypointDistortionJacobian(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) const [with DERIVED_P = Eigen::Block<const Eigen::Matrix<double, 4, 1>, 3, 1, false>; DERIVED_JD = Eigen::Matrix<double, -1, -1>; DISTORTION_T = aslam::cameras::NoDistortion][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp:553:42:[m[K   required from â€˜[01m[Kvoid aslam::cameras::DoubleSphereProjection<DISTORTION_T>::homogeneousToKeypointDistortionJacobian(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) const [with DERIVED_P = Eigen::Matrix<double, 4, 1>; DERIVED_JD = Eigen::Matrix<double, -1, -1>; DISTORTION_T = aslam::cameras::NoDistortion][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/CameraGeometry.hpp:363:74:[m[K   required from â€˜[01m[Kvoid aslam::cameras::CameraGeometry<PROJECTION_T, SHUTTER_T, MASK_T>::homogeneousToKeypointDistortionJacobian(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) const [with DERIVED_P = Eigen::Matrix<double, 4, 1>; DERIVED_JS = Eigen::Matrix<double, -1, -1>; PROJECTION_T = aslam::cameras::DoubleSphereProjection<aslam::cameras::NoDistortion>; SHUTTER_T = aslam::cameras::GlobalShutter; MASK_T = aslam::cameras::NoMask][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend/include/aslam/backend/implementation/CameraDesignVariable.hpp:50:4:[m[K   required from â€˜[01m[Kvoid aslam::backend::CameraDesignVariable<CAMERA_T>::evaluateJacobians(aslam::backend::JacobianContainer&, Eigen::Vector4d) const [with CAMERA_T = aslam::cameras::CameraGeometry<aslam::cameras::DoubleSphereProjection<aslam::cameras::NoDistortion>, aslam::cameras::GlobalShutter, aslam::cameras::NoMask>; Eigen::Vector4d = Eigen::Matrix<double, 4, 1>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_error_terms/include/aslam/backend/implementation/ReprojectionError.hpp:75:3:[m[K   required from â€˜[01m[Kvoid aslam::backend::ReprojectionError<CAMERA_GEOMETRY_T>::evaluateJacobiansImplementation(aslam::backend::JacobianContainer&) const [with CAMERA_GEOMETRY_T = aslam::cameras::CameraGeometry<aslam::cameras::DoubleSphereProjection<aslam::cameras::NoDistortion>, aslam::cameras::GlobalShutter, aslam::cameras::NoMask>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:136:1:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp:508:42:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kp[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp: In instantiation of â€˜[01m[Kvoid aslam::cameras::DoubleSphereProjection<DISTORTION_T>::euclideanToKeypointDistortionJacobian(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) const [with DERIVED_P = Eigen::Matrix<double, 3, 1>; DERIVED_JD = Eigen::Matrix<double, -1, -1>; DISTORTION_T = aslam::cameras::NoDistortion][m[Kâ€™:
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/CameraGeometry.hpp:688:9:[m[K   required from â€˜[01m[Kvoid aslam::cameras::CameraGeometry<PROJECTION_T, SHUTTER_T, MASK_T>::euclideanToKeypointIntrinsicsJacobian(const Vector3d&, Eigen::MatrixXd&, bool, bool, bool) const [with PROJECTION_T = aslam::cameras::DoubleSphereProjection<aslam::cameras::NoDistortion>; SHUTTER_T = aslam::cameras::GlobalShutter; MASK_T = aslam::cameras::NoMask; Eigen::Vector3d = Eigen::Matrix<double, 3, 1>; Eigen::MatrixXd = Eigen::Matrix<double, -1, -1>][m[Kâ€™
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cv_backend_python/src/module.cpp:136:1:[m[K   required from here
[01m[K/home/fanzhuzhi/kalibr_workspace/src/Kalibr/aslam_cv/aslam_cameras/include/aslam/cameras/implementation/DoubleSphereProjection.hpp:508:42:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kp[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
